---
# Source: istio/templates/envoyfilter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: misdirected-request
  namespace: istio-system
spec:
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: envoy.filters.http.router
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
              "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
              inlineCode: |
                function envoy_on_request(request_handle)
                  local serverName = request_handle:streamInfo():requestedServerName()
                  local authority = request_handle:headers():get(":authority")
                  if serverName ~= "" then
                    local subdomain = string.sub(serverName, 0, 2)
                    if (subdomain == "*." and not string.find(authority, serverName, 1, true)) then
                      request_handle:respond({[":status"] = "421"}, "Misdirected Request")
                    end
                    if (subdomain ~= "*." and not string.find(authority, serverName, 1, true)) then
                      request_handle:respond({[":status"] = "421"}, "Misdirected Request")
                    end
                  end
                end
---
# Source: istio/templates/envoyfilter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: remove-server-header
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: NETWORK_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: MERGE
      value:
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
          server_header_transformation: PASS_THROUGH
  - applyTo: ROUTE_CONFIGURATION
    match:
      context: GATEWAY
    patch:
      operation: MERGE
      value:
        response_headers_to_remove:
        - "x-envoy-upstream-service-time"
        - "server"
---
# Source: istio/templates/envoyfilter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: classification-banners
  namespace: istio-system
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter:
              name: envoy.filters.http.router
      proxy:
        proxyVersion: ^1\.17.*
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.compressor
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.compressor.v3.Compressor
          compressor_library:
            name: text_optimized
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.compression.gzip.compressor.v3.Gzip
              compression_level: BEST_COMPRESSION
              compression_strategy: DEFAULT_STRATEGY
              memory_level: 3
              window_bits: 10
          request_direction_config:
            common_config:
              enabled:
                default_value: false
                runtime_key: request_compressor_enabled
          response_direction_config:
            common_config:
              content_type:
              - text/html
              - application/json
              min_content_length: 100
            disable_on_etag_header: true
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter:
              name: envoy.filters.http.router
      proxy:
        proxyVersion: ^1\.17.*
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: "local classification = \"UNCLASSIFIED\"\n-- Use colors according
            to https://www.astrouxds.com/components/classification-markings/\n--\n--
            Unclassified\t#007a33\twhite\n-- Controlled (CUI)\t#502b85\twhite\n-- Confidential\t#0033a0\twhite\n--
            Secret\t#c8102e\twhite\n-- Top Secret\t#ff8c00\tblack\n-- Top Secret//SCI\t#fce83a\tblack\nlocal
            textColor = \"white\"\nlocal backgroundColor = \"#007a33\"\nlocal style
            = \"background-color: \" .. backgroundColor .. \"; color: \".. textColor
            .. \"; height: 16px; line-height: 16px; padding: 0 15px; border: 1px solid
            transparent; border-radius: 0; position: fixed; left: 0; width: 100vw; text-align:
            center; margin: 0; z-index: 10000;\"\n\nlocal header = \"<div style=\\\"\"
            .. style .. \" top: 0;\\\">\" .. classification .. \"</div>\"\nlocal footer
            = \"<div style=\\\"\" .. style .. \" bottom: 0;\\\">\" .. classification
            .. \"</div>\"\nfunction envoy_on_response(response_handle)\n    if response_handle:headers():get(\"Content-Type\")
            and string.find(response_handle:headers():get(\"Content-Type\"), \"text/html\")
            and not response_handle:headers():get(\"Content-Encoding\") then\n      local
            iterator = response_handle:bodyChunks()\n      for chunk in response_handle:bodyChunks()
            do\n        local body_size = chunk:length()\n        local body_bytes =
            chunk:getBytes(0, body_size)\n        local raw_text = tostring(body_bytes)\n
            \       chunk:setBytes(header .. footer .. raw_text)\n        break\n      end\n
            \   end\n  end"
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter:
              name: envoy.filters.http.router
      proxy:
        proxyVersion: ^1\.17.*
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.decompressor
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.decompressor.v3.Decompressor
          decompressor_library:
            name: small
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.compression.gzip.decompressor.v3.Gzip
              chunk_size: 65536
          request_direction_config:
            common_config:
              enabled:
                default_value: false
                runtime_key: request_decompressor_enabled
  workloadSelector:
    labels:
      istio: ingressgateway
---
# Source: istio/templates/gateway.yaml
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: main
  namespace: default
spec:
  selector:
    app: istio-ingressgateway
  servers:    
  - hosts:
    - '*.bigbang.dev'
    port:
      name: http
      number: 8080
      protocol: HTTP
    tls:
      httpsRedirect: true
  - hosts:
    - '*.bigbang.dev'
    port:
      name: https
      number: 8443
      protocol: HTTPS
    tls:
      credentialName: wildcard-cert
      mode: SIMPLE
---
# Source: istio/templates/controlplane.yaml
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: istiocontrolplane
  namespace: default
spec:
  profile: default
  hub: registry1.dso.mil/ironbank/opensource/istio
  tag: 1.17.3
  components:
    pilot:
      k8s:
        env:
          []
        hpaSpec:
          maxReplicas: 3
          minReplicas: 1
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: istiod
          metrics:
            - resource:
                name: cpu
                targetAverageUtilization: 60
              type: Resource
        replicaCount: 1
        resources:
          limits:
            cpu: 500m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 2Gi
        strategy:
          {}
        serviceAnnotations:
          {}
        podAnnotations:
          {}
        nodeSelector:
          {}
        affinity:
          {}
        tolerations:
          []
    ingressGateways:
    - name: istio-ingressgateway
      namespace: default
      enabled: true
      label:
        app: istio-ingressgateway
        istio: ingressgateway
      k8s:
        affinity: {}
        nodeSelector: {}
        podAnnotations: {}
        resources: {}
        service:
          type: LoadBalancer
        serviceAnnotations: {}
        tolerations: []
    egressGateways:
    - name: istio-egressgateway
      namespace: default
      enabled: false
      label:
        app: istio-egressgateway
        istio: egressgateway
      k8s:
        affinity: {}
        nodeSelector: {}
        podAnnotations: {}
        resources: {}
        service:
          type: LoadBalancer
        serviceAnnotations: {}
        tolerations: []
  meshConfig:
    accessLogFile: /dev/stdout
    enableTracing: false
    defaultConfig:
      tracing:
        sampling: 10
      zipkinAddress: jaeger-collector.jaeger.svc:9411
      holdApplicationUntilProxyStarts: true
    meshMTLS:
      minProtocolVersion: TLSV1_2

  values:
    global:
      proxy:
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
      proxy_init:
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
    defaultRevision: default
    sidecarInjectorWebhook:
      rewriteAppHTTPProbe: true
---
# Source: istio/templates/hook-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: istiod-hook
  namespace: istio-operator
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
  labels:
    app.kubernetes.io/name: istio-controlplane
    app.kubernetes.io/component: "core"
spec:
  template:
    metadata:
      name: istiod-hook
      labels:
        app.kubernetes.io/name: istio-controlplane
        app.kubernetes.io/component: "core"
    spec:
      serviceAccountName: istio-operator
      restartPolicy: OnFailure
      tolerations:
        []
      containers:
        - name: hook
          image: "registry1.dso.mil/ironbank/big-bang/base:2.0.0"
          command: ["kubectl"]
          args: ["rollout", "status","deployment/istiod", "-n", "istio-system"]
          securityContext:
            capabilities:
              drop:
              - ALL
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
